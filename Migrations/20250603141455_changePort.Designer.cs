// <auto-generated />
using System;
using BookishDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace bookish.Migrations
{
    [DbContext(typeof(BookishDBContext))]
    [Migration("20250603141455_changePort")]
    partial class changePort
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookID"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("integer");

                    b.Property<int?>("BookOutID")
                        .HasColumnType("integer");

                    b.Property<int>("Copies")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BookID");

                    b.HasIndex("BookOutID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookOut", b =>
                {
                    b.Property<int>("BookOutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookOutID"));

                    b.Property<int>("BookID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MemberID")
                        .HasColumnType("integer");

                    b.HasKey("BookOutID");

                    b.ToTable("BookOuts");
                });

            modelBuilder.Entity("Member", b =>
                {
                    b.Property<int>("MemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MemberID"));

                    b.Property<int?>("BookOutID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.HasKey("MemberID");

                    b.HasIndex("BookOutID");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Book", b =>
                {
                    b.HasOne("BookOut", null)
                        .WithMany("Books")
                        .HasForeignKey("BookOutID");
                });

            modelBuilder.Entity("Member", b =>
                {
                    b.HasOne("BookOut", null)
                        .WithMany("Members")
                        .HasForeignKey("BookOutID");
                });

            modelBuilder.Entity("BookOut", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
